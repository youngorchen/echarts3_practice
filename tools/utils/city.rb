require 'rubyexcel'
require 'pp'

$cities=[
'七台河市',
'三亚市',
'三明市',
'三沙市',
'三门峡市',
'上海市',
'上饶市',
'东莞市',
'东营市',
'中卫市',
'中山市',
'临夏回族自治州',
'临汾市',
'临沂市',
'临沧市',
'丹东市',
'丽水市',
'丽江市',
'乌兰察布市',
'乌海市',
'乌鲁木齐市',
'乐山市',
'九江市',
'云浮市',
'亳州市',
'仙桃市',
'伊春市',
'伊犁哈萨克自治州',
'佛山市',
'佳木斯市',
'保定市',
'保山市',
'信阳市',
'克孜勒苏柯尔克孜自治州',
'克拉玛依市',
'六安市',
'六盘水市',
'兰州市',
'兴安',
'兴安盟',
'内江市',
'凉山彝族自治州',
'包头市',
'北京市',
'北海市',
'十堰市',
'南京市',
'南充市',
'南宁市',
'南平市',
'南昌市',
'南通市',
'南阳市',
'博尔塔拉蒙古自治州',
'厦门市',
'双鸭山市',
'台州市',
'合肥市',
'吉安市',
'吉林市',
'吐鲁番地区',
'吕梁市',
'吴忠市',
'周口市',
'呼伦贝尔市',
'呼和浩特市',
'和田地区',
'咸宁市',
'咸阳市',
'哈密地区',
'哈尔滨市',
'唐山市',
'商丘市',
'商洛市',
'喀什地区',
'嘉兴市',
'嘉峪关市',
'四平市',
'固原市',
'垦区',
'塔城地区',
'大兴安岭地区',
'大同市',
'大庆市',
'大理白族自治州',
'大连市',
'天水市',
'天津市',
'天门市',
'太原市',
'威海市',
'娄底市',
'孝感市',
'宁德市',
'宁波市',
'安庆市',
'安康市',
'安阳市',
'安顺市',
'定西市',
'宜宾市',
'宜州市',
'宜昌市',
'宜春市',
'宝鸡市',
'宣城市',
'宿州市',
'宿迁市',
'山南地区',
'岳阳市',
'崇左市',
'巴中市',
'巴彦淖尔市',
'巴音郭楞蒙古自治州',
'常州市',
'常德市',
'平凉市',
'平顶山市',
'广东省公安厅交通管理局车辆管理所核发的港澳入出境车号牌',
'广元市',
'广安市',
'广州市',
'庆阳市',
'廊坊市',
'延安市',
'延边朝鲜族自治州',
'开封市',
'张家口市',
'张家界市',
'张掖市',
'徐州市',
'德宏傣族景颇族自治州',
'德州市',
'德阳市',
'忻州市',
'怀化市',
'怒江傈僳族自治州',
'恩施土家族苗族自治州',
'惠州市',
'成都市',
'扬州市',
'承德市',
'抚州市',
'抚顺市',
'拉萨市',
'揭阳市',
'攀枝花市',
'文山壮族苗族自治州',
'新乡市',
'新余市',
'无锡市',
'日喀则地区',
'日照市',
'昆明市',
'昌吉回族自治州',
'昌都地区',
'昭通市',
'晋中市',
'晋城市',
'普洱市',
'景德镇市',
'曲靖市',
'朔州市',
'朝阳市',
'本溪市',
'来宾市',
'杨凌',
'杭州市',
'松原市',
'林芝地区',
'果洛藏族自治州',
'枣庄市',
'柳州市',
'株洲市',
'桂林市',
'梅州市',
'梧州市',
'楚雄彝族自治州',
'榆林市',
'武威市',
'武汉市',
'毕节地区',
'毕节市',
'永州市',
'汉中市',
'汕头市',
'汕尾市',
'江门市',
'池州市',
'沈阳市',
'沧州市',
'河池市',
'河源市',
'泉州市',
'泰安市',
'泰州市',
'泸州市',
'洋浦经济开发区',
'洛阳市',
'济南市',
'济宁市',
'济源市',
'海东地区',
'海北藏族自治州',
'海南藏族自治州',
'海口市',
'海西蒙古族藏族自治州',
'淄博市',
'淮北市',
'淮南市',
'淮安市',
'深圳市',
'清远市',
'温州市',
'渭南市',
'港澳入出境车号牌',
'湖州市',
'湘潭市',
'湘西土家族苗族自治州',
'湛江市',
'滁州市',
'滨州市',
'漯河市',
'漳州市',
'潍坊市',
'潜江市',
'潮州市',
'濮阳市',
'烟台市',
'焦作市',
'牡丹江市',
'玉林市',
'玉树藏族自治州',
'玉溪市',
'珠海市',
'琼北',
'琼南',
'甘南藏族自治州',
'甘孜藏族自治州',
'白城市',
'白山市',
'白银市',
'百色市',
'益阳市',
'盐城市',
'盘锦市',
'眉山市',
'石嘴山市',
'石家庄市',
'石河子市',
'神农架林区',
'福州市',
'秦皇岛市',
'红河哈尼族彝族自治州',
'绍兴市',
'绥化市',
'绵阳市',
'聊城市',
'肇庆市',
'自贡市',
'舟山市',
'芜湖市',
'苏州市',
'茂名市',
'荆州市',
'荆门市',
'莆田市',
'莱芜市',
'菏泽市',
'萍乡市',
'营口市',
'葫芦岛市',
'蚌埠市',
'衡水市',
'衡阳市',
'衢州市',
'襄阳市',
'西双版纳傣族自治州',
'西宁市',
'西安市',
'许昌市',
'贵港市',
'贵阳市',
'贺州市',
'资阳市',
'赣州市',
'赤峰市',
'辽源市',
'辽阳市',
'达州市',
'运城市',
'连云港市',
'迪庆藏族自治州',
'通化市',
'通辽市',
'遂宁市',
'遵义市',
'邢台市',
'那曲地区',
'邯郸市',
'邵阳市',
'郑州市',
'郴州市',
'鄂尔多斯市',
'鄂州市',
'酒泉市',
'重庆市',
'金华市',
'金昌市',
'钦州市',
'铁岭市',
'铜仁地区',
'铜仁市',
'铜川市',
'铜陵市',
'银川市',
'锡林郭勒盟',
'锦州市',
'镇江市',
'长春市',
'长沙市',
'长治市',
'长白山保护开发区',
'阜新市',
'阜阳市',
'防城港市',
'阳江市',
'阳泉市',
'阿克苏地区',
'阿勒泰地区',
'阿坝藏族羌族自治州',
'阿拉善盟',
'阿里地区',
'陇南市',
'随州市',
'雅安市',
'青岛市',
'鞍山市',
'韶关市',
'马鞍山市',
'驻马店市',
'鸡西市',
'鹤壁市',
'鹤岗市',
'鹰潭市',
'黄冈市',
'黄南藏族自治州',
'黄山市',
'黄石市',
'黑河市',
'黔东南苗族侗族自治州',
'黔南布依族苗族自治州',
'黔西南布依族苗族自治州',
'齐齐哈尔市',
'龙岩市'
]

$cities_gis="
'七台河市':[130.95,45.78],
'三亚市':[109.5,18.25],
'三明市':[117.62,26.27],
'三门峡市':[111.2,34.78],
'上海市':[121.47,31.23],
'上饶市':[117.97,28.45],
'东莞市':[113.75,23.05],
'东营市':[118.67,37.43],
'中卫市':[105.18,37.52],
'中山市':[113.38,22.52],
'临夏回族自治州':[103.22,35.6],
'临汾市':[111.52,36.08],
'临沂市':[118.35,35.05],
'临沧市':[100.08,23.88],
'丹东市':[124.38,40.13],
'丽水市':[119.92,28.45],
'丽江市':[100.23,26.88],
'乌兰察布市':[113.12,40.98],
'乌海市':[106.82,39.67],
'乌鲁木齐市':[87.62,43.82],
'乐山市':[103.77,29.57],
'九江市':[116,29.7],
'云浮市':[112.03,22.92],
'亳州市':[115.78,33.85],
'仙桃市':[113.45,30.37],
'伊春市':[128.9,47.73],
'伊犁哈萨克自治州':[81.32,43.92],
'佛山市':[113.12,23.02],
'佳木斯市':[130.37,46.82],
'保定市':[115.47,38.87],
'保山市':[99.17,25.12],
'信阳市':[114.07,32.13],
'克拉玛依市':[84.87,45.6],
'六安市':[116.5,31.77],
'六盘水市':[104.83,26.6],
'兰州市':[103.82,36.07],
'兴安盟':[122.05,46.08],
'内江市':[105.05,29.58],
'凉山彝族自治州':[102.27,27.9],
'包头市':[109.83,40.65],
'北京市':[116.4,39.9],
'北海市':[109.12,21.48],
'十堰市':[110.78,32.65],
'南京市':[118.78,32.07],
'南充市':[106.08,30.78],
'南宁市':[108.37,22.82],
'南平市':[118.17,26.65],
'南昌市':[115.85,28.68],
'南通市':[120.88,31.98],
'南阳市':[112.52,33],
'博尔塔拉蒙古自治州':[82.07,44.9],
'厦门市':[118.08,24.48],
'双鸭山市':[131.15,46.63],
'台州市':[121.43,28.68],
'合肥市':[117.25,31.83],
'吉安市':[114.98,27.12],
'吉林市':[126.55,43.83],
'吐鲁番地区':[89.17,42.95],
'吕梁市':[111.13,37.52],
'吴忠市':[106.2,37.98],
'周口市':[114.65,33.62],
'呼伦贝尔市':[119.77,49.22],
'呼和浩特市':[111.73,40.83],
'和田地区':[79.92,37.12],
'咸宁市':[114.32,29.85],
'咸阳市':[108.7,34.33],
'哈密地区':[93.52,42.83],
'哈尔滨市':[126.53,45.8],
'唐山市':[118.2,39.63],
'商丘市':[115.65,34.45],
'商洛市':[109.93,33.87],
'喀什地区':[75.98,39.47],
'嘉兴市':[120.75,30.75],
'嘉峪关市':[98.27,39.8],
'四平市':[124.35,43.17],
'固原市':[106.28,36],
'塔城地区':[82.98,46.75],
'大兴安岭地区':[124.12,50.42],
'大同市':[113.3,40.08],
'大庆市':[125.03,46.58],
'大理白族自治州':[100.23,25.6],
'大连市':[121.62,38.92],
'天水市':[105.72,34.58],
'天津市':[117.2,39.12],
'天门市':[113.17,30.67],
'太原市':[112.55,37.87],
'威海市':[122.12,37.52],
'娄底市':[112,27.73],
'孝感市':[113.92,30.93],
'宁德市':[119.52,26.67],
'宁波市':[121.55,29.88],
'安庆市':[117.05,30.53],
'安康市':[109.02,32.68],
'安阳市':[114.38,36.1],
'安顺市':[105.95,26.25],
'定西市':[104.62,35.58],
'宜宾市':[104.62,28.77],
'宜州市':[108.67,24.5],
'宜昌市':[111.28,30.7],
'宜春市':[114.38,27.8],
'宝鸡市':[107.13,34.37],
'宣城市':[118.75,30.95],
'宿州市':[116.98,33.63],
'宿迁市':[118.28,33.97],
'山南地区':[91.77,29.23],
'岳阳市':[113.12,29.37],
'崇左市':[107.37,22.4],
'巴中市':[106.77,31.85],
'巴彦淖尔市':[107.42,40.75],
'巴音郭楞蒙古自治州':[86.15,41.77],
'常州市':[119.95,31.78],
'常德市':[111.68,29.05],
'平凉市':[106.67,35.55],
'平顶山市':[113.18,33.77],
'广元市':[105.83,32.43],
'广安市':[106.63,30.47],
'广州市':[113.27,23.13],
'庆阳市':[107.63,35.73],
'廊坊市':[116.7,39.52],
'延安市':[109.48,36.6],
'延边朝鲜族自治州':[129.5,42.88],
'开封市':[114.3,34.8],
'张家口市':[114.88,40.82],
'张家界市':[110.47,29.13],
'张掖市':[100.45,38.93],
'徐州市':[117.18,34.27],
'德宏傣族景颇族自治州':[98.58,24.43],
'德州市':[116.3,37.45],
'德阳市':[104.38,31.13],
'忻州市':[112.73,38.42],
'怀化市':[110,27.57],
'怒江傈僳族自治州':[98.85,25.85],
'恩施土家族苗族自治州':[109.47,30.3],
'惠州市':[114.42,23.12],
'成都市':[104.07,30.67],
'扬州市':[119.4,32.4],
'承德市':[117.93,40.97],
'抚州市':[116.35,28],
'抚顺市':[123.98,41.88],
'拉萨市':[91.13,29.65],
'揭阳市':[116.37,23.55],
'攀枝花市':[101.72,26.58],
'文山壮族苗族自治州':[104.25,23.37],
'新乡市':[113.9,35.3],
'新余市':[114.92,27.82],
'无锡市':[120.3,31.57],
'日喀则地区':[88.88,29.27],
'日照市':[119.52,35.42],
'昆明市':[102.72,25.05],
'昌吉回族自治州':[87.3,44.02],
'昌都地区':[97.18,31.13],
'昭通市':[103.72,27.33],
'晋中市':[112.75,37.68],
'晋城市':[112.83,35.5],
'景德镇市':[117.17,29.27],
'曲靖市':[103.8,25.5],
'朔州市':[112.43,39.33],
'朝阳市':[120.45,41.57],
'本溪市':[123.77,41.3],
'来宾市':[109.23,23.73],
'杭州市':[120.15,30.28],
'松原市':[124.82,45.13],
'林芝地区':[94.37,29.68],
'果洛藏族自治州':[100.23,34.48],
'枣庄市':[117.32,34.82],
'柳州市':[109.42,24.33],
'株洲市':[113.13,27.83],
'桂林市':[110.28,25.28],
'梅州市':[116.12,24.28],
'梧州市':[111.27,23.48],
'楚雄彝族自治州':[101.55,25.03],
'榆林市':[109.73,38.28],
'武威市':[102.63,37.93],
'武汉市':[114.3,30.6],
'毕节地区':[105.28,27.3],
'毕节市':[105.28,27.3],
'永州市':[111.62,26.43],
'汉中市':[107.02,33.07],
'汕头市':[116.68,23.35],
'汕尾市':[115.37,22.78],
'江门市':[113.08,22.58],
'池州市':[117.48,30.67],
'沈阳市':[123.43,41.8],
'沧州市':[116.83,38.3],
'河池市':[108.07,24.7],
'河源市':[114.7,23.73],
'泉州市':[118.67,24.88],
'泰安市':[117.08,36.2],
'泰州市':[119.92,32.45],
'泸州市':[105.43,28.87],
'洛阳市':[112.45,34.62],
'济南市':[116.98,36.67],
'济宁市':[116.58,35.42],
'济源市':[112.58,35.07],
'海东地区':[102.12,36.5],
'海北藏族自治州':[100.9,36.97],
'海南藏族自治州':[100.62,36.28],
'海口市':[110.32,20.03],
'海西蒙古族藏族自治州':[97.37,37.37],
'淄博市':[118.05,36.82],
'淮北市':[116.8,33.95],
'淮南市':[117,32.63],
'淮安市':[119.02,33.62],
'深圳市':[114.05,22.55],
'清远市':[113.03,23.7],
'温州市':[120.7,28],
'渭南市':[109.5,34.5],
'湖州市':[120.08,30.9],
'湘潭市':[112.93,27.83],
'湘西土家族苗族自治州':[109.73,28.32],
'湛江市':[110.35,21.27],
'滁州市':[118.32,32.3],
'滨州市':[117.97,37.38],
'漯河市':[114.02,33.58],
'漳州市':[117.65,24.52],
'潍坊市':[119.15,36.7],
'潜江市':[112.88,30.42],
'潮州市':[116.62,23.67],
'濮阳市':[115.03,35.77],
'烟台市':[121.43,37.45],
'焦作市':[113.25,35.22],
'牡丹江市':[129.6,44.58],
'玉林市':[110.17,22.63],
'玉树藏族自治州':[97.02,33],
'玉溪市':[102.55,24.35],
'珠海市':[113.57,22.27],
'甘南藏族自治州':[102.92,34.98],
'甘孜藏族自治州':[101.97,30.05],
'白城市':[122.83,45.62],
'白山市':[126.42,41.93],
'白银市':[104.18,36.55],
'百色市':[106.62,23.9],
'益阳市':[112.32,28.6],
'盐城市':[120.15,33.35],
'盘锦市':[122.07,41.12],
'眉山市':[103.83,30.05],
'石嘴山市':[106.38,39.02],
'石家庄市':[114.52,38.05],
'石河子市':[86.03,44.3],
'神农架林区':[110.67,31.75],
'福州市':[119.3,26.08],
'秦皇岛市':[119.6,39.93],
'红河哈尼族彝族自治州':[103.4,23.37],
'绍兴市':[120.57,30],
'绥化市':[126.98,46.63],
'绵阳市':[104.73,31.47],
'聊城市':[115.98,36.45],
'肇庆市':[112.47,23.05],
'自贡市':[104.78,29.35],
'舟山市':[122.2,30],
'芜湖市':[118.38,31.33],
'苏州市':[120.58,31.3],
'茂名市':[110.92,21.67],
'荆州市':[112.23,30.33],
'荆门市':[112.2,31.03],
'莆田市':[119,25.43],
'莱芜市':[117.67,36.22],
'萍乡市':[113.85,27.63],
'营口市':[122.23,40.67],
'葫芦岛市':[120.83,40.72],
'蚌埠市':[117.38,32.92],
'衡水市':[115.68,37.73],
'衡阳市':[112.57,26.9],
'衢州市':[118.87,28.93],
'西双版纳傣族自治州':[100.8,22.02],
'西宁市':[101.78,36.62],
'西安市':[108.93,34.27],
'许昌市':[113.85,34.03],
'贵港市':[109.6,23.1],
'贵阳市':[106.63,26.65],
'贺州市':[111.55,24.42],
'资阳市':[104.65,30.12],
'赣州市':[114.93,25.83],
'赤峰市':[118.92,42.27],
'辽源市':[125.13,42.88],
'辽阳市':[123.17,41.27],
'达州市':[107.5,31.22],
'运城市':[110.98,35.02],
'连云港市':[119.22,34.6],
'迪庆藏族自治州':[99.7,27.83],
'通化市':[125.93,41.73],
'通辽市':[122.27,43.62],
'遂宁市':[105.57,30.52],
'遵义市':[106.92,27.73],
'邢台市':[114.48,37.07],
'那曲地区':[92.07,31.48],
'邯郸市':[114.48,36.62],
'邵阳市':[111.47,27.25],
'郑州市':[113.62,34.75],
'郴州市':[113.02,25.78],
'鄂尔多斯市':[109.8,39.62],
'鄂州市':[114.88,30.4],
'酒泉市':[98.52,39.75],
'重庆市':[106.55,29.57],
'金华市':[119.65,29.08],
'金昌市':[102.18,38.5],
'钦州市':[108.62,21.95],
'铁岭市':[123.83,42.28],
'铜仁地区':[109.18,27.72],
'铜仁市':[109.18,27.72],
'铜川市':[108.93,34.9],
'铜陵市':[117.82,30.93],
'银川市':[106.28,38.47],
'锡林郭勒盟':[116.07,43.95],
'锦州市':[121.13,41.1],
'镇江市':[119.45,32.2],
'长春市':[125.32,43.9],
'长沙市':[112.93,28.23],
'长治市':[113.12,36.2],
'阜新市':[121.67,42.02],
'阜阳市':[115.82,32.9],
'防城港市':[108.35,21.7],
'阳江市':[111.98,21.87],
'阳泉市':[113.57,37.85],
'阿克苏地区':[80.27,41.17],
'阿勒泰地区':[88.13,47.85],
'阿坝藏族羌族自治州':[102.22,31.9],
'阿拉善盟':[105.67,38.83],
'阿里地区':[80.1,32.5],
'陇南市':[104.92,33.4],
'随州市':[113.37,31.72],
'雅安市':[103,29.98],
'青岛市':[120.38,36.07],
'鞍山市':[122.98,41.1],
'韶关市':[113.6,24.82],
'马鞍山市':[118.5,31.7],
'驻马店市':[114.02,32.98],
'鸡西市':[130.97,45.3],
'鹤壁市':[114.28,35.75],
'鹤岗市':[130.27,47.33],
'鹰潭市':[117.07,28.27],
'黄冈市':[114.87,30.45],
'黄南藏族自治州':[102.02,35.52],
'黄山市':[118.33,29.72],
'黄石市':[115.03,30.2],
'黑河市':[127.48,50.25],
'黔东南苗族侗族自治州':[107.97,26.58],
'黔南布依族苗族自治州':[107.52,26.27],
'齐齐哈尔市':[123.95,47.33],
'龙岩市':[117.03,25.1]
"

$map_4s = {
'凯越':'上汽通用别克',
'奥迪A6L':'一汽奥迪',
'雨燕':'',
'卡罗拉':'一汽丰田',
'沃尔沃XC60':'沃尔沃',
'本田CR-V':'东风本田',
'帕萨特':'上汽大众',
'Cayenne':'',
'宝马5系':'华晨宝马',
'伊兰特':'北京现代',
'天籁':'东风日产',
'雅阁':'广汽本田',
'捷达':'一汽大众',
'标致307':'东风标致',
'嘉年华':'长安福特',
'MG3':'',
'赛拉图':'东风悦达起亚',
'别克GL8':'上汽通用别克',
'哈弗H6':'',
'天语SX4':'',
'普拉多':'一汽丰田',
'五菱宏光':'',
'思域':'东风本田',
'大众POLO':'上汽大众',
'Macan':'',
'宝马3系':'华晨宝马',
'悦动':'北京现代',
'轩逸':'东风日产',
'飞度':'广汽本田',
'宝来':'一汽大众',
'标致408':'东风标致',
'蒙迪欧':'长安福特',
'奥迪A4L':'一汽奥迪',
'起亚K2':'东风悦达起亚',
'君威':'上汽通用别克',
'凯迪拉克XTS':'上汽通用凯迪拉克',
'马自达6':'',
'锐志':'一汽丰田',
'科鲁兹':'上汽通用雪佛兰',
'凯美瑞':'广汽丰田',
'朗逸':'上汽大众',
'奔驰E级':'北京奔驰',
'宝马X5':'华晨宝马',
'瑞纳':'北京现代',
'骐达':'东风日产',
'奥德赛':'广汽本田',
'速腾':'一汽大众',
'标致308':'东风标致',
'福克斯':'长安福特',
'奥迪Q5':'一汽奥迪',
'狮跑':'东风悦达起亚',
'君越':'上汽通用别克',
'雷克萨斯ES':'雷克萨斯',
'睿翼':'',
'威驰':'一汽丰田',
'爱丽舍':'东风雪铁龙',
'汉兰达':'广汽丰田',
'桑塔纳':'上汽大众',
'奔驰C级':'北京奔驰',
'现代ix35':'北京现代',
'迈腾':'一汽大众',
'致胜':'长安福特',
'英朗XT':'上汽通用别克',
'揽胜极光':'捷豹路虎',
'丰田RAV4':'一汽丰田',
'英菲尼迪FX':'',
'途观':'上汽大众',
'朗动':'北京现代',
'高尔夫':'一汽大众',
'昂科威':'上汽通用别克',
'明锐':'上汽大众斯柯达',
'皇冠':'一汽丰田',
'长安之星':'',
'科帕奇':'上汽通用雪佛兰',
'锐腾':'',
'标致3008':'',
}

def read_csv_gbk(file_name,n,sep=',')
    num = 0
    err = 0
    begin
        recs = []
        File.foreach(file_name,:encoding=>"gbk") { |line|
            #pp line  
            a = line.chomp.split(/#{sep}/)
            #pp a if num > 16840
            #gets

            bb = []
            (0..n-1).each do |i|
                bb[i] = ''
            end
            i = 0
            a.each do |item|
                bb[i] = a[i]
                i += 1
            end

            if a.size < n 
                pp a
                err += 1
                next
            end
            num += 1
            recs << bb
        }
        #pp recs
        puts "read #{num} records, error #{err} records!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        sleep 5
        recs
    rescue  => ex
        puts puts "#{ex.backtrace}: #{ex.message} (#{ex.class})"
    end 
end

#保持N位小数点转化

def to_n_point_float(f,n=2)
    sprintf("%.#{n}f", f).to_f
end

#图形颜色(#e1ad21土灰)(#576b7c蓝灰)(#e68c60橙灰)( #25b96e绿灰)( #e64c60红灰)

$color = [
'#c23531','#e1ad21','#576b7c','#e68c60','#25b96e','#e64c60']
#//{value:335, name:'直接访问'}, {value:310, name:'邮件营销'},
def write_pie(recs,name_col,val_col,file_name,utf8 = false,color1='#c23531')

    str1 = ''
    min = 0
    max = 0

    (0..recs.length-1).each do |i|
        t = recs[i]
        unless utf8
            str1 += '{value:' + t[val_col].to_s + ",name:'" + $ec_2_utf8.convert(t[name_col].to_s)  + "'},\n"
        else
            str1 += '{value:' + t[val_col].to_s + ",name:'" + t[name_col].to_s  + "'},\n"
        end
        min = t[val_col] if min > t[val_col]
        max = t[val_col] if max < t[val_col]
    end

    #puts min,max
    min = (min * 0.9).round
    max = (max * 1.1).round
    #puts min,max

    
    data = IO.read('../template/pie.template',:encoding=>"utf-8")
    data.gsub!(/PARAM0/,"#{min}")
    data.gsub!(/PARAM1/,"#{max}")
    data.gsub!(/PARAM2/,"#{str1}")
    data.gsub!(/PARAM3/,color1)


    #puts data

    IO.write("../../server/public/my_js/#{file_name}.js",data,:encoding=>"utf-8")
end

#//['a',20],['b',50],['c',40]
def write_area(recs,name_col,val_col,file_name,c1='#ffffff',c2='#ff0000',c3='#ff0000')

    name_str = ''
    val_str = ''

    (0..recs.length-1).each do |i|
        t = recs[i]
        #pp t
        #pp recs
        name_str += "'" + $ec_2_utf8.convert(t[name_col].to_s)  + "',\n"
        val_str += "['" + t[name_col].to_s + "'," + $ec_2_utf8.convert(t[val_col].to_s) + "],\n"
    end
    

    data = IO.read('../template/area.template',:encoding=>"utf-8")
    data.gsub!(/PARAM0/,"#{name_str}")
    data.gsub!(/PARAM1/,"#{val_str}")
    data.gsub!(/PARAM2/,"#{c1}")
    data.gsub!(/PARAM3/,"#{c2}")
    data.gsub!(/PARAM4/,"#{c3}")
    
    #puts data

    IO.write("../../server/public/my_js/#{file_name}.js",data,:encoding=>"utf-8")
end

#//{name: '海门', value: 9}, {name: '大庆', value: 279}
def write_map(recs,name_col,val_col,file_name,color1='#f4e925')
    str1 = ''
    min = 0
    max = 0

    (0..recs.length-1).each do |i|
        t = recs[i]
        str1 += '{value:' + t[val_col].to_s + ",name:'" + t[name_col].to_s  + "'},\n"
        min = t[val_col] if min > t[val_col]
        max = t[val_col] if max < t[val_col]
    end

    min = (min * 0.9).round
    max = (max * 1.1).round

    data = IO.read('../template/map.template',:encoding=>"utf-8")
    data.gsub!(/PARAM0/,"#{str1}")
    data.gsub!(/PARAM1/,"#{$cities_gis}")
    data.gsub!(/PARAM2/,"#{min}")
    data.gsub!(/PARAM3/,"#{max}")
    data.gsub!(/PARAM4/,color1)

    #puts data

    IO.write("../../server/public/my_js/#{file_name}.js",data,:encoding=>"utf-8")
end

#////[{name:'北京'}, {name:'上海',value:95}],
def write_map3(recs,name_col,val_col,file_name,from_city,color1='#f4e925')
    str1 = ''
    min = 0
    max = 0

    (0..[recs.length-1,50].min).each do |i|
        t = recs[i]
        next if t[val_col].to_i <= 0
        str1 += "[{name:\'#{from_city}\'},{name:'" + t[name_col].to_s  + "',value:" + t[val_col].to_s + "}],\n"
        min = t[val_col] if min > t[val_col]
        max = t[val_col] if max < t[val_col]
    end

    min = (min * 0.9).round
    max = (max * 1.1).round

    data = IO.read('../template/map3.template',:encoding=>"utf-8")
    data.gsub!(/PARAM0/,"#{str1}")
    data.gsub!(/PARAM1/,"#{$cities_gis}")
    data.gsub!(/PARAM2/,color1)

    #puts data

    IO.write("../../server/public/my_js/#{file_name}.js",data,:encoding=>"utf-8")
end

#////[0.64,1,947,'北京'],
def write_buble(recs,name_col,val_col_arr,file_name,c1,c2)
    str1 = ''
    min = 0
    max = 0

    (0..recs.length-1).each do |i|
        t = recs[i]
        #str1 += "[{name:\'#{from_city}\'},{name:'" + t[name_col].to_s  + "',value:" + t[val_col].to_s + "}],\n"
        str1 += "[#{t[val_col_arr[0]].to_s},#{t[val_col_arr[1]].to_s},#{t[val_col_arr[2]].to_s},\'#{t[name_col].to_s}\'],"
        #min = t[val_col] if min > t[val_col]
        #max = t[val_col] if max < t[val_col]
    end

    min = (min * 0.9).round
    max = (max * 1.1).round

    data = IO.read('../template/buble.template',:encoding=>"utf-8")
    data.gsub!(/PARAM0/,"#{str1}")
    data.gsub!(/PARAM1/,c1)
    data.gsub!(/PARAM2/,c2)

    #puts data

    IO.write("../../server/public/my_js/#{file_name}.js",data,:encoding=>"utf-8")
end
$ec_2_gbk = Encoding::Converter.new("utf-8", "gbk")
$ec_2_utf8 = Encoding::Converter.new("gbk","utf-8")

def to_gbk(str)
    #Encoding::Converter.new("utf-8", "gbk").convert(str)
    $ec_2_gbk.convert(str)
end

def to_utf8(str)
    #Encoding::Converter.new("gbk","utf-8").convert(str)
    $ec_2_utf8.convert(str)
end


#//['a',20],['b',50],['c',40]
def write_bar2(recs,name_col,val_col,file_name,color1)

    name_str = ''
    val_str = ''

    #//{value: 29, label: labelLeft}, 升序
    (0..recs.length-1).each do |i|
        t = recs[i]
        #pp t
        #pp recs
        #name_str += "'" + $ec_2_utf8.convert(t[name_col].to_s)  + "',\n"
        begin

            name_str += "{ value:" + $ec_2_utf8.convert(t[val_col].to_s) + ", label: labelLeft},\n"
        rescue Exception => e  
            puts i
            pp t
            pp recs
            pp val_col
            puts e.message  
            puts e.backtrace.inspect
        end
    end
    

    data = IO.read('../template/bar2.template',:encoding=>"utf-8")
    data.gsub!(/PARAM0/,"#{name_str}")
    data.gsub!(/PARAM1/,"#{color1}")
    

    
    #puts data

    IO.write("../../server/public/my_js/#{file_name}.js",data,:encoding=>"utf-8")
end

#//['a',20],['b',50],['c',40]
def write_bar(recs,name_col,val_col,file_name,c1,c2,c3,spec=false)

    name_str = ''
    val_str = ''

    #//{value: 29, label: labelLeft}, 升序
    (0..recs.length-1).each do |i|
        t = recs[i]
        #pp t
        #pp recs
        name_str += "'" + $ec_2_utf8.convert(t[name_col].to_s)  + "',"
        val_str += "" + $ec_2_utf8.convert(t[val_col].to_s) + ","
    end
    

    data = IO.read('../template/bar.template',:encoding=>"utf-8")

    data.gsub!(/PARAM0/,c1) #color

    if spec
        data.gsub!(/PARAM1/,"'1年','2年','3年','4年','5年','6年','7年','8年','9年','10年','11年','12年','13年','14年','15年','15年以上'") #'1年','2年' xaxis
    else
        data.gsub!(/PARAM1/,name_str) #'1年','2年' xaxis
    end

    data.gsub!(/PARAM2/,c3) #80%
    data.gsub!(/PARAM3/,val_str) # 1,2,3
    

    
    #puts data

    IO.write("../../server/public/my_js/#{file_name}.js",data,:encoding=>"utf-8")
end
def to_hex(i)
    i.to_s(16)
end

def change_str(num)
  str = num.to_s
  nil while str.gsub!(/(.*\d)(\d\d\d)/, '\1,\2')
  return str
end
#s = change_str(1243245)
#puts s

#return UTF8 encode data
def get_excel(file_name,range1,range2)
    puts file_name
    str = IO.read(file_name,:encoding=>"gbk")
    s = RubyExcel::Workbook.new.load( CSV.parse( to_utf8(str) )) 
    len = s.length
    puts "#{len} records!"
    r1_w = ''
    r2_w = ''
    r1_n = 0
    r2_n = 0

    if range1 =~ /(([a-z]|[A-Z])+)(\d+)/
        r1_w = $1
        r1_n = [$3.to_i,len].min
    end

    if range2 =~ /(([a-z]|[A-Z])+)(\d+)/
        r2_w = $1
        r2_n = [$3.to_i,len].min
    end
    puts "==========================>#{r1_w}#{r1_n},#{r2_w}#{r2_n} ==========================>>>>"
    r = s.range("#{r1_w}#{r1_n}","#{r2_w}#{r2_n}").value
    #pp r
    if r1_w == r2_w
        #puts "-"
        r.flatten.find_all {|a|  a} 
    else
    #    puts "!" * 80 
        r.find_all {|a|  a if a[0]} 
    end
end

